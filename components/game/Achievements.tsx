"use client";

import { useQuery } from "convex/react";
import { api } from "@/convex/_generated/api";
import { Id } from "@/convex/_generated/dataModel";

interface AchievementsProps {
  userId: Id<"users">;
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
interface Achievement {
  id: string;
  name: string;
  description: string;
  icon: string;
  condition: {
    type: "complex_level" | "resource_amount" | "clicks" | "boosters_used";
    target: number;
    complexType?: string;
    resourceType?: "energons" | "neutrons" | "particles";
  };
  reward: {
    type: "resource";
    resourceType: "energons" | "neutrons" | "particles";
    amount: number;
  };
}

// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const ACHIEVEMENTS: Achievement[] = [
  {
    id: "first_click",
    name: "–ü–µ—Ä–≤—ã–π –∞—Ç–æ–º",
    description: "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω 10 —Ä–∞–∑",
    icon: "üñ±Ô∏è",
    condition: {
      type: "clicks",
      target: 10
    },
    reward: {
      type: "resource",
      resourceType: "energons",
      amount: 100
    }
  },
  {
    id: "energy_milestone_1",
    name: "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ä—ã–≤",
    description: "–ù–∞–∫–æ–ø–∏—Ç–µ 1,000 —ç–Ω–µ—Ä–≥–æ–Ω–æ–≤",
    icon: "‚ö°",
    condition: {
      type: "resource_amount",
      resourceType: "energons",
      target: 1000
    },
    reward: {
      type: "resource",
      resourceType: "neutrons",
      amount: 10
    }
  },
  {
    id: "kollektiv_master",
    name: "–ö–æ–ª–ª–µ–∫—Ç–∏–≤–∏–∑–∞—Ü–∏—è",
    description: "–£–ª—É—á—à–∏—Ç–µ –ö–û–õ–õ–ï–ö–¢–ò–í-1 –¥–æ 10 —É—Ä–æ–≤–Ω—è",
    icon: "üè≠",
    condition: {
      type: "complex_level",
      complexType: "KOLLEKTIV-1",
      target: 10
    },
    reward: {
      type: "resource",
      resourceType: "energons",
      amount: 1000
    }
  },
  {
    id: "neutron_collector",
    name: "–ù–µ–π—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä",
    description: "–ù–∞–∫–æ–ø–∏—Ç–µ 100 –Ω–µ–π—Ç—Ä–æ–Ω–æ–≤",
    icon: "‚öõÔ∏è",
    condition: {
      type: "resource_amount",
      resourceType: "neutrons",
      target: 100
    },
    reward: {
      type: "resource",
      resourceType: "energons",
      amount: 2000
    }
  },
  {
    id: "booster_enthusiast",
    name: "–≠–Ω—Ç—É–∑–∏–∞—Å—Ç –±—É—Å—Ç–µ—Ä–æ–≤",
    description: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 3 —Ä–∞–∑–Ω—ã—Ö –±—É—Å—Ç–µ—Ä–∞",
    icon: "üöÄ",
    condition: {
      type: "boosters_used",
      target: 3
    },
    reward: {
      type: "resource",
      resourceType: "particles",
      amount: 5
    }
  }
];

export default function Achievements({ userId }: AchievementsProps) {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const userData = useQuery(api.users.getUserResources, {
    userId,
  });
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–∫–æ–≤
  const userStats = useQuery(api.users.getUserStats, {
    userId,
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userComplexes = useQuery(api.complexes.getUserComplexes, {
    userId,
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—É—Å—Ç–µ—Ä–æ–≤
  const boosterHistory = useQuery(api.boosters.getBoosterHistory, {
    userId,
    limit: 100
  });
  
  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  if (!userData || !userStats || !userComplexes) {
    return (
      <div className="bg-gray-800 rounded-lg p-4 mb-6">
        <h3 className="text-lg font-bold mb-2">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
        <div className="text-center text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—É—á–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...</div>
      </div>
    );
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  const achievementsWithProgress = ACHIEVEMENTS.map(achievement => {
    let progress = 0;
    let isCompleted = false;
    
    switch (achievement.condition.type) {
      case "clicks":
        progress = Math.min(100, (userStats.manualClicks / achievement.condition.target) * 100);
        isCompleted = userStats.manualClicks >= achievement.condition.target;
        break;
        
      case "resource_amount":
        if (achievement.condition.resourceType) {
          const resourceAmount = userData[achievement.condition.resourceType];
          progress = Math.min(100, (resourceAmount / achievement.condition.target) * 100);
          isCompleted = resourceAmount >= achievement.condition.target;
        }
        break;
        
      case "complex_level":
        if (achievement.condition.complexType) {
          const complex = userComplexes.find(c => c.type === achievement.condition.complexType);
          if (complex) {
            progress = Math.min(100, (complex.level / achievement.condition.target) * 100);
            isCompleted = complex.level >= achievement.condition.target;
          }
        }
        break;
        
      case "boosters_used":
        if (boosterHistory) {
          // –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –±—É—Å—Ç–µ—Ä–æ–≤
          const uniqueBoosterTypes = new Set(
            boosterHistory.map(history => {
              try {
                const metadata = JSON.parse(history.metadata || "{}");
                return metadata.boosterType;
              } catch {
                return null;
              }
            }).filter(Boolean)
          );
          
          progress = Math.min(100, (uniqueBoosterTypes.size / achievement.condition.target) * 100);
          isCompleted = uniqueBoosterTypes.size >= achievement.condition.target;
        }
        break;
    }
    
    return {
      ...achievement,
      progress,
      isCompleted
    };
  });
  
  return (
    <div className="bg-gray-800 rounded-lg p-4 mb-6">
      <h3 className="text-lg font-bold mb-3">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
      
      <div className="space-y-3">
        {achievementsWithProgress.map(achievement => (
          <div 
            key={achievement.id} 
            className={`flex items-center bg-gray-700 rounded-lg p-3 ${
              achievement.isCompleted ? 'border border-yellow-500' : ''
            }`}
          >
            <div className="text-3xl mr-3">{achievement.icon}</div>
            
            <div className="flex-1">
              <div className="flex justify-between items-center">
                <h4 className="font-bold">{achievement.name}</h4>
                <span className={`text-xs ${achievement.isCompleted ? 'text-green-400' : 'text-gray-400'}`}>
                  {achievement.isCompleted ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' : `${Math.floor(achievement.progress)}%`}
                </span>
              </div>
              
              <p className="text-xs text-gray-400 mt-1">{achievement.description}</p>
              
              <div className="w-full bg-gray-800 rounded-full h-1.5 mt-2">
                <div 
                  className={`h-1.5 rounded-full ${
                    achievement.isCompleted ? 'bg-green-500' : 'bg-blue-500'
                  }`}
                  style={{ width: `${achievement.progress}%` }}
                ></div>
              </div>
              
              <div className="text-xs text-gray-400 mt-1">
                –ù–∞–≥—Ä–∞–¥–∞: <span className="text-yellow-400">{achievement.reward.amount} {
                  achievement.reward.resourceType === "energons" ? "—ç–Ω–µ—Ä–≥–æ–Ω–æ–≤" : 
                  achievement.reward.resourceType === "neutrons" ? "–Ω–µ–π—Ç—Ä–æ–Ω–æ–≤" : "—á–∞—Å—Ç–∏—Ü"
                }</span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}